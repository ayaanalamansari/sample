version: 0.2

env:
  variables:
    BUILD: "dev"
    DEBUG: False

    AWS_DEFAULT_REGION: "us-east-2"
    JWT_SECRET_KEY: ""
    PROJECT_CONF: "region_conf"

    BASE_APP_DIR: "region_management"

    CONTAINER_NAME: "name"
    MODELS_S3_BUCKET: "name"
    CONF_S3_BUCKET: "name"
    TEST_OUTPUT_BUCKET: "name"

phases:
  install:
    commands:
      - echo CODEBUILD_SRC_DIR - $CODEBUILD_SRC_DIR
      - apt-get update
      - apt-get install -y python3-setuptools
      - apt-get install -y python3-pip
      - pip3 install -r requirements.txt
      - echo `pip3 freeze`
    finally:
      - echo This always runs even if the update or install command fails

  pre_build:
    commands:
      - echo pre build state...
      - aws s3 cp --recursive s3://${MODELS_S3_BUCKET} ${BASE_APP_DIR}/apps/NoVacancy-Backend-Models/
      - aws s3 cp s3://${CONF_S3_BUCKET}/${PROJECT_CONF}.py config/
      # - cp config/local.py.example config/local.py
      - echo Run django test cases...
      # - pytest --html=report.html
      # - mkdir test test/assets/
      # - cp report.html test/
      # - cp assets/style.css test/assets/
      # - zip -r test.zip test/
      # - aws s3 cp test.zip s3://${TEST_OUTPUT_BUCKET}/${CONTAINER_NAME}/
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo ecr repo uri - $REPOSITORY_URI
      - echo commit hash - $COMMIT_HASH
    finally:
      - echo pre_build state completed

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image... new
      - docker build --build-arg BUILD=$BUILD --build-arg DEBUG=$DEBUG --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION --build-arg JWT_SECRET_KEY=$JWT_SECRET_KEY -t $REPOSITORY_URI:${IMAGE_TAG} .
      - docker tag $REPOSITORY_URI:${IMAGE_TAG} $REPOSITORY_URI:${IMAGE_TAG}
    finally:
      - echo build state completed

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:${IMAGE_TAG}
      - echo Writing image definitions file...
      - echo `ls`
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:${IMAGE_TAG} > imagedefinitions.json
    finally:
      - echo post_build state completed

artifacts:
  files:
    - 'imagedefinitions.json'
  discard-paths: yes
  # base-directory: '/'
