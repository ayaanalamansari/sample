# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import datetime

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u*mvv8s^0&bu8#fact-k#g7rh-rz5!izrtbrlinii-o!+n$jjp'
JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', '-u@r(v&l(hk6_hxm+@gb9t^k2gah+dpbw@#_h*utqf)e&qicpb')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', ['.novacancyreservations.com'])

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'novacancy<support@novacancy.com>')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', "support@novacancy.com")

ATOMIC_REQUESTS = os.getenv('ATOMIC_REQUESTS', True)

API_ROOT = DEBUG # enable root api view

SITE_URL = os.getenv('SITE_URL', 'http://localhost:8005/')

WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:8005/')

APP_LOGO = os.getenv('APP_LOGO', '')

BUILD = os.getenv('BUILD', "dev")

DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', 5432)
DB_NAME = os.getenv('DB_NAME', 'test_db')
DB_USER = os.getenv('DB_USER', "user")
DB_PASS = os.getenv('DB_PASS', "pass")

############################# Database #############################
# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASS,
        'HOST' : DB_HOST,
        'PORT' : DB_PORT,
    }
}

########################## DRF Settings #############################
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        # 'rest_framework.renderers.AdminRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ('v1', 'v2'),
    #'DEFAULT_PAGINATION_CLASS': 'novacancyapp.pagination.StandardResultsPageNumberPagination',
    #'EXCEPTION_HANDLER': 'novacancyapp.exceptions.custom_exception_handler',
}

JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
    'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
    'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_response_payload_handler',

    'JWT_SECRET_KEY': JWT_SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=36000),
    'JT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,

}

############################# Static ###############################
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
#STATICFILES_DIRS = [
#    "/static/",
#    #'/var/project/static/',
#]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

############################# Logging ###############################
PY_LOGGING = DEBUG  # True/False
ADMINS = (('Admin', 'admin@no_vacancy.com'),)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': [
                'require_debug_false',
                # 'require_debug_true'
            ],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True
        }
    }
}

####################### Celery Configurations #######################
BROKER_URL = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# BROKER_URL = 'amqp://guest@localhost:5672//'
CELERY_RESULT_BACKEND = 'djcelery.backends.database.DatabaseBackend'

CELERYD_MAX_TASKS_PER_CHILD = os.getenv('CELERYD_MAX_TASKS_PER_CHILD', 2)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_DEFAULT_QUEUE = os.getenv('CELERY_DEFAULT_QUEUE', 'novacancy_region')
# CELERY_ALWAYS_EAGER = True    ## Call task without Celery.
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.sendgrid.net')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'apikey')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '*************************************')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', True)


######################  S3 CREDENTIALS  #######################
AWS_S3_REGION = os.getenv('AWS_S3_REGION', "xxxxx")
AWS_S3_BUCKET = os.getenv('AWS_S3_BUCKET', "xxxxxxxxxx")
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID', "xxxxxxxxxxxxxxxx")
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY', "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
